/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Exception} from '../model/Exception';
import {Statistic} from '../model/Statistic';
import {Statistics} from '../model/Statistics';
import {UserStatistic} from '../model/UserStatistic';

/**
* Statistics service.
* @module api/StatisticsApi
* @version 1.0.0
*/
export class StatisticsApi {

    /**
    * Constructs a new StatisticsApi. 
    * @alias module:api/StatisticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getPhenomenonStatistic operation.
     * @callback moduleapi/StatisticsApi~getPhenomenonStatisticCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statistic{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the phenomenon statistics.
     * Get the phenomenon statistics.
     * @param {String} phenomenonId The phenomenon id.
     * @param {module:api/StatisticsApi~getPhenomenonStatisticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPhenomenonStatistic(phenomenonId, callback) {
      
      let postBody = null;
      // verify the required parameter 'phenomenonId' is set
      if (phenomenonId === undefined || phenomenonId === null) {
        throw new Error("Missing the required parameter 'phenomenonId' when calling getPhenomenonStatistic");
      }

      let pathParams = {
        'phenomenonId': phenomenonId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Statistic;

      return this.apiClient.callApi(
        '/phenomenons/{phenomenonId}/statistic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSensorStatistics operation.
     * @callback moduleapi/StatisticsApi~getSensorStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Sensor statistics.
     * Get the Sensor statistics.
     * @param {String} sensorId The Sensor id.
     * @param {module:api/StatisticsApi~getSensorStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSensorStatistics(sensorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sensorId' is set
      if (sensorId === undefined || sensorId === null) {
        throw new Error("Missing the required parameter 'sensorId' when calling getSensorStatistics");
      }

      let pathParams = {
        'sensorId': sensorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Statistics;

      return this.apiClient.callApi(
        '/sensors/{sensorId}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStatisticsOfUser operation.
     * @callback moduleapi/StatisticsApi~getStatisticsOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user statistics.
     * Get the user statistics.
     * @param {String} userId The user id.
     * @param {module:api/StatisticsApi~getStatisticsOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStatisticsOfUser(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getStatisticsOfUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Statistics;

      return this.apiClient.callApi(
        '/users/{userId}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackStatistics operation.
     * @callback moduleapi/StatisticsApi~getTrackStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the statistics of a track.
     * Get the statistics of a track.
     * @param {String} trackId The track id.
     * @param {module:api/StatisticsApi~getTrackStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackStatistics(trackId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling getTrackStatistics");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Statistics;

      return this.apiClient.callApi(
        '/tracks/{trackId}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserStatistics operation.
     * @callback moduleapi/StatisticsApi~getUserStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserStatistic{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user statistics.
     * Get the user statistics.
     * @param {String} userId The user id.
     * @param {module:api/StatisticsApi~getUserStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserStatistics(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserStatistics");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = UserStatistic;

      return this.apiClient.callApi(
        '/users/{userId}/userStatistic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}