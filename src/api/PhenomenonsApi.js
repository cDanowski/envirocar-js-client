/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Exception} from '../model/Exception';
import {Phenomenon} from '../model/Phenomenon';
import {PhenomenonCreate} from '../model/PhenomenonCreate';
import {Phenomenons} from '../model/Phenomenons';
import {Range} from '../model/Range';
import {Statistic} from '../model/Statistic';

/**
* Phenomenons service.
* @module api/PhenomenonsApi
* @version 1.0.0
*/
export class PhenomenonsApi {

    /**
    * Constructs a new PhenomenonsApi. 
    * @alias module:api/PhenomenonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createPhenomenon operation.
     * @callback moduleapi/PhenomenonsApi~createPhenomenonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new phenomenon.
     * Create new phenomenon.
     * @param {module:model/PhenomenonCreate} body The phenomenon to create.
     * @param {module:api/PhenomenonsApi~createPhenomenonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPhenomenon(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPhenomenon");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/phenomenons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPhenomenonById operation.
     * @callback moduleapi/PhenomenonsApi~getPhenomenonByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Phenomenon{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the phenomenon by id.
     * Get the phenomenon by id.
     * @param {String} phenomenonId The phenomenon id.
     * @param {module:api/PhenomenonsApi~getPhenomenonByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPhenomenonById(phenomenonId, callback) {
      
      let postBody = null;
      // verify the required parameter 'phenomenonId' is set
      if (phenomenonId === undefined || phenomenonId === null) {
        throw new Error("Missing the required parameter 'phenomenonId' when calling getPhenomenonById");
      }

      let pathParams = {
        'phenomenonId': phenomenonId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Phenomenon;

      return this.apiClient.callApi(
        '/phenomenons/{phenomenonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPhenomenonStatistic operation.
     * @callback moduleapi/PhenomenonsApi~getPhenomenonStatisticCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statistic{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the phenomenon statistics.
     * Get the phenomenon statistics.
     * @param {String} phenomenonId The phenomenon id.
     * @param {module:api/PhenomenonsApi~getPhenomenonStatisticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPhenomenonStatistic(phenomenonId, callback) {
      
      let postBody = null;
      // verify the required parameter 'phenomenonId' is set
      if (phenomenonId === undefined || phenomenonId === null) {
        throw new Error("Missing the required parameter 'phenomenonId' when calling getPhenomenonStatistic");
      }

      let pathParams = {
        'phenomenonId': phenomenonId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Statistic;

      return this.apiClient.callApi(
        '/phenomenons/{phenomenonId}/statistic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPhenomenons operation.
     * @callback moduleapi/PhenomenonsApi~getPhenomenonsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Phenomenons{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the phenomenon listing.
     * Get the phenomenon listing.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/PhenomenonsApi~getPhenomenonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPhenomenons(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Phenomenons;

      return this.apiClient.callApi(
        '/phenomenons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}