/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Exception} from '../model/Exception';
import {Range} from '../model/Range';
import {Sensor} from '../model/Sensor';
import {SensorCreate} from '../model/SensorCreate';
import {Sensors} from '../model/Sensors';
import {Statistics} from '../model/Statistics';

/**
* Sensors service.
* @module api/SensorsApi
* @version 1.0.0
*/
export class SensorsApi {

    /**
    * Constructs a new SensorsApi. 
    * @alias module:api/SensorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createSensor operation.
     * @callback moduleapi/SensorsApi~createSensorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Sensor.
     * Create a new Sensor.
     * @param {module:model/SensorCreate} body The sensor to create.
     * @param {module:api/SensorsApi~createSensorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSensor(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSensor");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/sensors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSensorForUser operation.
     * @callback moduleapi/SensorsApi~createSensorForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Sensor.
     * Create a new Sensor.
     * @param {module:model/SensorCreate} body The sensor to create.
     * @param {String} userId The user id.
     * @param {module:api/SensorsApi~createSensorForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSensorForUser(body, userId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSensorForUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createSensorForUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/sensors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMeasurementSensor operation.
     * @callback moduleapi/SensorsApi~getMeasurementSensorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sensor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sensor of a measurement.
     * Get the sensor of a measurement.
     * @param {String} measurementId The measurement id.
     * @param {module:api/SensorsApi~getMeasurementSensorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMeasurementSensor(measurementId, callback) {
      
      let postBody = null;
      // verify the required parameter 'measurementId' is set
      if (measurementId === undefined || measurementId === null) {
        throw new Error("Missing the required parameter 'measurementId' when calling getMeasurementSensor");
      }

      let pathParams = {
        'measurementId': measurementId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Sensor;

      return this.apiClient.callApi(
        '/measurements/{measurementId}/sensor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSensorById operation.
     * @callback moduleapi/SensorsApi~getSensorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sensor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Sensor by id.
     * Get the Sensor by id.
     * @param {String} sensorId The Sensor id.
     * @param {module:api/SensorsApi~getSensorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSensorById(sensorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sensorId' is set
      if (sensorId === undefined || sensorId === null) {
        throw new Error("Missing the required parameter 'sensorId' when calling getSensorById");
      }

      let pathParams = {
        'sensorId': sensorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Sensor;

      return this.apiClient.callApi(
        '/sensors/{sensorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSensorStatistics operation.
     * @callback moduleapi/SensorsApi~getSensorStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Sensor statistics.
     * Get the Sensor statistics.
     * @param {String} sensorId The Sensor id.
     * @param {module:api/SensorsApi~getSensorStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSensorStatistics(sensorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sensorId' is set
      if (sensorId === undefined || sensorId === null) {
        throw new Error("Missing the required parameter 'sensorId' when calling getSensorStatistics");
      }

      let pathParams = {
        'sensorId': sensorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Statistics;

      return this.apiClient.callApi(
        '/sensors/{sensorId}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSensors operation.
     * @callback moduleapi/SensorsApi~getSensorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sensors{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Sensor listing.
     * Get the Sensor listing.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type The Sensor type.
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/SensorsApi~getSensorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSensors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'type': opts['type'],'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Sensors;

      return this.apiClient.callApi(
        '/sensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSensorsOfUser operation.
     * @callback moduleapi/SensorsApi~getSensorsOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sensors{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Sensor listing.
     * Get the Sensor listing.
     * @param {String} userId The user id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type The Sensor type.
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/SensorsApi~getSensorsOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSensorsOfUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSensorsOfUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'type': opts['type'],'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Sensors;

      return this.apiClient.callApi(
        '/users/{userId}/sensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackSensor operation.
     * @callback moduleapi/SensorsApi~getTrackSensorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sensor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sensor of a track.
     * Get the sensor of a track.
     * @param {String} trackId The track id.
     * @param {module:api/SensorsApi~getTrackSensorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackSensor(trackId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling getTrackSensor");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Sensor;

      return this.apiClient.callApi(
        '/tracks/{trackId}/sensor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}