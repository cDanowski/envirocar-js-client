/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Exception} from '../model/Exception';
import {MeasurementCreate} from '../model/MeasurementCreate';
import {Measurements} from '../model/Measurements';
import {Range} from '../model/Range';
import {Sensor} from '../model/Sensor';
import {Statistics} from '../model/Statistics';
import {TemporalFilter} from '../model/TemporalFilter';
import {Track} from '../model/Track';
import {TrackCreate} from '../model/TrackCreate';
import {TrackModify} from '../model/TrackModify';
import {TrackStatus} from '../model/TrackStatus';
import {Tracks} from '../model/Tracks';

/**
* Tracks service.
* @module api/TracksApi
* @version 1.0.0
*/
export class TracksApi {

    /**
    * Constructs a new TracksApi. 
    * @alias module:api/TracksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addTrackMeasurement operation.
     * @callback moduleapi/TracksApi~addTrackMeasurementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a measurement to a track.
     * Add a measurement to a track.
     * @param {module:model/MeasurementCreate} body The measurement to create.
     * @param {String} trackId The track id.
     * @param {module:api/TracksApi~addTrackMeasurementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTrackMeasurement(body, trackId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addTrackMeasurement");
      }
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling addTrackMeasurement");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tracks/{trackId}/measurements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTrack operation.
     * @callback moduleapi/TracksApi~createTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new track.
     * Create a new track.
     * @param {module:model/TrackCreate} body The track to create.
     * @param {module:api/TracksApi~createTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTrack(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTrack");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTrackForUser operation.
     * @callback moduleapi/TracksApi~createTrackForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new track.
     * Create a new track.
     * @param {module:model/TrackCreate} body The track to create.
     * @param {String} userId The user id.
     * @param {module:api/TracksApi~createTrackForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTrackForUser(body, userId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTrackForUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createTrackForUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTrack operation.
     * @callback moduleapi/TracksApi~deleteTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified track.
     * Delete the specified track.
     * @param {String} trackId The track id.
     * @param {module:api/TracksApi~deleteTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrack(trackId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling deleteTrack");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tracks/{trackId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackById operation.
     * @callback moduleapi/TracksApi~getTrackByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified track.
     * Get the specified track.
     * @param {String} trackId The track id.
     * @param {module:api/TracksApi~getTrackByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackById(trackId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling getTrackById");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Track;

      return this.apiClient.callApi(
        '/tracks/{trackId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackMeasurements operation.
     * @callback moduleapi/TracksApi~getTrackMeasurementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Measurements{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the measurements of a track.
     * Get the measurements of a track.
     * @param {String} trackId The track id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/TracksApi~getTrackMeasurementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackMeasurements(trackId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling getTrackMeasurements");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Measurements;

      return this.apiClient.callApi(
        '/tracks/{trackId}/measurements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackSensor operation.
     * @callback moduleapi/TracksApi~getTrackSensorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sensor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sensor of a track.
     * Get the sensor of a track.
     * @param {String} trackId The track id.
     * @param {module:api/TracksApi~getTrackSensorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackSensor(trackId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling getTrackSensor");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Sensor;

      return this.apiClient.callApi(
        '/tracks/{trackId}/sensor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackStatistics operation.
     * @callback moduleapi/TracksApi~getTrackStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the statistics of a track.
     * Get the statistics of a track.
     * @param {String} trackId The track id.
     * @param {module:api/TracksApi~getTrackStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackStatistics(trackId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling getTrackStatistics");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Statistics;

      return this.apiClient.callApi(
        '/tracks/{trackId}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTracks operation.
     * @callback moduleapi/TracksApi~getTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tracks{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of tracks.
     * Get the list of tracks.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.bbox The bounding box the requested tracks have to intersect with.
     * @param {module:model/TemporalFilter} opts.after The time instant or interval to be applied with the &#x60;after&#x60; operator.
     * @param {module:model/TemporalFilter} opts.before The time instant or interval to be applied with the &#x60;before&#x60; operator.
     * @param {module:model/TemporalFilter} opts.begins The time instant or interval to be applied with the &#x60;begins&#x60; operator.
     * @param {module:model/TemporalFilter} opts.begunBy The time instant or interval to be applied with the &#x60;begunBy&#x60; operator.
     * @param {module:model/TemporalFilter} opts.contains The time instant or interval to be applied with the &#x60;contains&#x60; operator.
     * @param {module:model/TemporalFilter} opts.during The time instant or interval to be applied with the &#x60;during&#x60; operator.
     * @param {module:model/TemporalFilter} opts.endedBy The time instant or interval to be applied with the &#x60;endedBy&#x60; operator.
     * @param {module:model/TemporalFilter} opts.ends The time instant or interval to be applied with the &#x60;ends&#x60; operator.
     * @param {module:model/TemporalFilter} opts.equals The time instant or interval to be applied with the &#x60;equals&#x60; operator.
     * @param {module:model/TemporalFilter} opts.meets The time instant or interval to be applied with the &#x60;meets&#x60; operator.
     * @param {module:model/TemporalFilter} opts.metBy The time instant or interval to be applied with the &#x60;metBy&#x60; operator.
     * @param {module:model/TemporalFilter} opts.overlapped The time instant or interval to be applied with the &#x60;overlapped&#x60; operator.
     * @param {module:model/TemporalFilter} opts.overlaps The time instant or interval to be applied with the &#x60;overlaps&#x60; operator.
     * @param {module:model/TrackStatus} opts.status 
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/TracksApi~getTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTracks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'bbox': this.apiClient.buildCollectionParam(opts['bbox'], 'csv'),'after': opts['after'],'before': opts['before'],'begins': opts['begins'],'begunBy': opts['begunBy'],'contains': opts['contains'],'during': opts['during'],'endedBy': opts['endedBy'],'ends': opts['ends'],'equals': opts['equals'],'meets': opts['meets'],'metBy': opts['metBy'],'overlapped': opts['overlapped'],'overlaps': opts['overlaps'],'status': opts['status'],'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Tracks;

      return this.apiClient.callApi(
        '/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTracksOfUser operation.
     * @callback moduleapi/TracksApi~getTracksOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tracks{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of tracks.
     * Get the list of tracks.
     * @param {String} userId The user id.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.bbox The bounding box the requested tracks have to intersect with.
     * @param {Array.<Number>} opts.nearPoint The point to which the distance can not fall below a certain threshold.
     * @param {module:model/TemporalFilter} opts.after The time instant or interval to be applied with the &#x60;after&#x60; operator.
     * @param {module:model/TemporalFilter} opts.before The time instant or interval to be applied with the &#x60;before&#x60; operator.
     * @param {module:model/TemporalFilter} opts.begins The time instant or interval to be applied with the &#x60;begins&#x60; operator.
     * @param {module:model/TemporalFilter} opts.begunBy The time instant or interval to be applied with the &#x60;begunBy&#x60; operator.
     * @param {module:model/TemporalFilter} opts.contains The time instant or interval to be applied with the &#x60;contains&#x60; operator.
     * @param {module:model/TemporalFilter} opts.during The time instant or interval to be applied with the &#x60;during&#x60; operator.
     * @param {module:model/TemporalFilter} opts.endedBy The time instant or interval to be applied with the &#x60;endedBy&#x60; operator.
     * @param {module:model/TemporalFilter} opts.ends The time instant or interval to be applied with the &#x60;ends&#x60; operator.
     * @param {module:model/TemporalFilter} opts.equals The time instant or interval to be applied with the &#x60;equals&#x60; operator.
     * @param {module:model/TemporalFilter} opts.meets The time instant or interval to be applied with the &#x60;meets&#x60; operator.
     * @param {module:model/TemporalFilter} opts.metBy The time instant or interval to be applied with the &#x60;metBy&#x60; operator.
     * @param {module:model/TemporalFilter} opts.overlapped The time instant or interval to be applied with the &#x60;overlapped&#x60; operator.
     * @param {module:model/TemporalFilter} opts.overlaps The time instant or interval to be applied with the &#x60;overlaps&#x60; operator.
     * @param {module:model/TrackStatus} opts.status 
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/TracksApi~getTracksOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTracksOfUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getTracksOfUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'bbox': this.apiClient.buildCollectionParam(opts['bbox'], 'csv'),'nearPoint': this.apiClient.buildCollectionParam(opts['nearPoint'], 'csv'),'after': opts['after'],'before': opts['before'],'begins': opts['begins'],'begunBy': opts['begunBy'],'contains': opts['contains'],'during': opts['during'],'endedBy': opts['endedBy'],'ends': opts['ends'],'equals': opts['equals'],'meets': opts['meets'],'metBy': opts['metBy'],'overlapped': opts['overlapped'],'overlaps': opts['overlaps'],'status': opts['status'],'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Tracks;

      return this.apiClient.callApi(
        '/users/{userId}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyTrack operation.
     * @callback moduleapi/TracksApi~modifyTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified track.
     * Update the specified track.
     * @param {module:model/TrackModify} body The track modifications.
     * @param {String} trackId The track id.
     * @param {module:api/TracksApi~modifyTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modifyTrack(body, trackId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modifyTrack");
      }
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling modifyTrack");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tracks/{trackId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the previewTrack operation.
     * @callback moduleapi/TracksApi~previewTrackCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the preview image of the track.
     * Get the preview image of the track.
     * @param {String} trackId The track id.
     * @param {module:api/TracksApi~previewTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    previewTrack(trackId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling previewTrack");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/tracks/{trackId}/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the shareTrack operation.
     * @callback moduleapi/TracksApi~shareTrackCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the share link of the track.
     * Get the share link of the track.
     * @param {String} trackId The track id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/TracksApi~shareTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    shareTrack(trackId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling shareTrack");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
        'locale': opts['locale']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/tracks/{trackId}/share', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}