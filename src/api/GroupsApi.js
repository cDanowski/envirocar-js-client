/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Activities} from '../model/Activities';
import {Activity} from '../model/Activity';
import {Exception} from '../model/Exception';
import {Group} from '../model/Group';
import {GroupCreate} from '../model/GroupCreate';
import {GroupModify} from '../model/GroupModify';
import {Groups} from '../model/Groups';
import {Range} from '../model/Range';
import {User} from '../model/User';
import {UserRef} from '../model/UserRef';
import {Users} from '../model/Users';

/**
* Groups service.
* @module api/GroupsApi
* @version 1.0.0
*/
export class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addGroupMember operation.
     * @callback moduleapi/GroupsApi~addGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add the group member.
     * Add the group member.
     * @param {module:model/UserRef} body The user reference.
     * @param {String} groupId The group id.
     * @param {module:api/GroupsApi~addGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addGroupMember(body, groupId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addGroupMember");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addGroupMember");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{groupId}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback moduleapi/GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the group.
     * Create the group.
     * @param {module:model/GroupCreate} body The group to create.
     * @param {module:api/GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createGroup(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGroup");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createUserGroup operation.
     * @callback moduleapi/GroupsApi~createUserGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the user group.
     * Create the user group.
     * @param {module:model/GroupCreate} body The group to create.
     * @param {String} userId The user id.
     * @param {module:api/GroupsApi~createUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUserGroup(body, userId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUserGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserGroup");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback moduleapi/GroupsApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the group.
     * Delete the group.
     * @param {String} groupId The group id.
     * @param {module:api/GroupsApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroup(groupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUserGroup operation.
     * @callback moduleapi/GroupsApi~deleteUserGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the group.
     * Delete the group.
     * @param {String} userId The user id.
     * @param {String} groupId The group id.
     * @param {module:api/GroupsApi~deleteUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserGroup(userId, groupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteUserGroup");
      }

      let pathParams = {
        'userId': userId,'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback moduleapi/GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the group.
     * Get the group
     * @param {String} groupId The group id.
     * @param {module:api/GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroup(groupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Group;

      return this.apiClient.callApi(
        '/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroupActivities operation.
     * @callback moduleapi/GroupsApi~getGroupActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activities{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the activities of the group.
     * Get the activities of the group.
     * @param {String} groupId The group id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The activity type.
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/GroupsApi~getGroupActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroupActivities(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupActivities");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'type': opts['type'],'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Activities;

      return this.apiClient.callApi(
        '/groups/{groupId}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroupActivityById operation.
     * @callback moduleapi/GroupsApi~getGroupActivityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activity{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the activity of the group.
     * Get the activity of the group.
     * @param {String} groupId The group id.
     * @param {String} activityId The activity id.
     * @param {module:api/GroupsApi~getGroupActivityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroupActivityById(groupId, activityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupActivityById");
      }
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling getGroupActivityById");
      }

      let pathParams = {
        'groupId': groupId,'activityId': activityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Activity;

      return this.apiClient.callApi(
        '/groups/{groupId}/activities/{activityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroupMember operation.
     * @callback moduleapi/GroupsApi~getGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the group member.
     * Get the group member.
     * @param {String} groupId The group id.
     * @param {String} memberId The member id.
     * @param {module:api/GroupsApi~getGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroupMember(groupId, memberId, callback) {
      
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getGroupMember");
      }

      let pathParams = {
        'groupId': groupId,'memberId': memberId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/groups/{groupId}/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroupMembers operation.
     * @callback moduleapi/GroupsApi~getGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Users{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the group members.
     * Get the group members.
     * @param {String} groupId The group id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/GroupsApi~getGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroupMembers(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupMembers");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Users;

      return this.apiClient.callApi(
        '/groups/{groupId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroups operation.
     * @callback moduleapi/GroupsApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Groups{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the groups.
     * Get the groups.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q The term to search for.
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/GroupsApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Groups;

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserGroup operation.
     * @callback moduleapi/GroupsApi~getUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the group of the user.
     * Get the group of the user
     * @param {String} userId The user id.
     * @param {String} groupId The group id.
     * @param {module:api/GroupsApi~getUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserGroup(userId, groupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getUserGroup");
      }

      let pathParams = {
        'userId': userId,'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Group;

      return this.apiClient.callApi(
        '/users/{userId}/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserGroups operation.
     * @callback moduleapi/GroupsApi~getUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Groups{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the groups of the user.
     * Get the groups of the user
     * @param {String} userId The user id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q The term to search for.
     * @param {Number} opts.limit The number of entities per page. (default to <.>)
     * @param {Number} opts.page The page of entities to request. (default to <.>)
     * @param {module:model/Range} opts.range The range of entities to request.
     * @param {module:api/GroupsApi~getUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserGroups(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserGroups");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'q': opts['q'],'limit': opts['limit'],'page': opts['page']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = Groups;

      return this.apiClient.callApi(
        '/users/{userId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyGroup operation.
     * @callback moduleapi/GroupsApi~modifyGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the group.
     * Modify the group.
     * @param {module:model/GroupModify} body The group modifications.
     * @param {String} groupId The group id.
     * @param {module:api/GroupsApi~modifyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modifyGroup(body, groupId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modifyGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling modifyGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyUserGroup operation.
     * @callback moduleapi/GroupsApi~modifyUserGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the group.
     * Modify the group.
     * @param {module:model/GroupModify} body The group modifications.
     * @param {String} userId The user id.
     * @param {String} groupId The group id.
     * @param {module:api/GroupsApi~modifyUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modifyUserGroup(body, userId, groupId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modifyUserGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling modifyUserGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling modifyUserGroup");
      }

      let pathParams = {
        'userId': userId,'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeGroupMember operation.
     * @callback moduleapi/GroupsApi~removeGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the user from the group.
     * Remove the user from the group.
     * @param {String} groupId The group id.
     * @param {String} memberId The member id.
     * @param {module:api/GroupsApi~removeGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGroupMember(groupId, memberId, callback) {
      
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeGroupMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling removeGroupMember");
      }

      let pathParams = {
        'groupId': groupId,'memberId': memberId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{groupId}/members/{memberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}