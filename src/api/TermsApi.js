/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Exception} from '../model/Exception';
import {PrivacyStatement} from '../model/PrivacyStatement';
import {PrivacyStatements} from '../model/PrivacyStatements';
import {TermsOfUse} from '../model/TermsOfUse';
import {TermsOfUseInstance} from '../model/TermsOfUseInstance';

/**
* Terms service.
* @module api/TermsApi
* @version 1.0.0
*/
export class TermsApi {

    /**
    * Constructs a new TermsApi. 
    * @alias module:api/TermsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getPrivacyStatements operation.
     * @callback moduleapi/TermsApi~getPrivacyStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivacyStatements{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of privacy statements.
     * Get the list of privacy statements.
     * @param {module:api/TermsApi~getPrivacyStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPrivacyStatements(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = PrivacyStatements;

      return this.apiClient.callApi(
        '/privacyStatements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPrivacyStatementsById operation.
     * @callback moduleapi/TermsApi~getPrivacyStatementsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivacyStatement{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the privacy statement.
     * Get the privacy statement.
     * @param {String} privacyStatementId The privacy statement id.
     * @param {module:api/TermsApi~getPrivacyStatementsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPrivacyStatementsById(privacyStatementId, callback) {
      
      let postBody = null;
      // verify the required parameter 'privacyStatementId' is set
      if (privacyStatementId === undefined || privacyStatementId === null) {
        throw new Error("Missing the required parameter 'privacyStatementId' when calling getPrivacyStatementsById");
      }

      let pathParams = {
        'privacyStatementId': privacyStatementId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = PrivacyStatement;

      return this.apiClient.callApi(
        '/privacyStatements/{privacyStatementId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTermsOfUse operation.
     * @callback moduleapi/TermsApi~getTermsOfUseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TermsOfUse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of terms of use.
     * Get the list of terms of use.
     * @param {module:api/TermsApi~getTermsOfUseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTermsOfUse(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = TermsOfUse;

      return this.apiClient.callApi(
        '/termsOfUse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTermsOfUseById operation.
     * @callback moduleapi/TermsApi~getTermsOfUseByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TermsOfUseInstance{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the terms of use.
     * Get the terms of use.
     * @param {String} termsOfUseId The terms of use id.
     * @param {module:api/TermsApi~getTermsOfUseByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTermsOfUseById(termsOfUseId, callback) {
      
      let postBody = null;
      // verify the required parameter 'termsOfUseId' is set
      if (termsOfUseId === undefined || termsOfUseId === null) {
        throw new Error("Missing the required parameter 'termsOfUseId' when calling getTermsOfUseById");
      }

      let pathParams = {
        'termsOfUseId': termsOfUseId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/yaml'];
      let returnType = TermsOfUseInstance;

      return this.apiClient.callApi(
        '/termsOfUse/{termsOfUseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}