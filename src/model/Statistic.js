/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Phenomenon} from './Phenomenon';

/**
 * The Statistic model module.
 * @module model/Statistic
 * @version 1.0.0
 */
export class Statistic {
  /**
   * Constructs a new <code>Statistic</code>.
   * @alias module:model/Statistic
   * @class
   * @param phenomenon {module:model/Phenomenon} 
   * @param measurements {Number} 
   * @param users {Number} 
   * @param tracks {Number} 
   * @param min {Number} 
   * @param max {Number} 
   * @param avg {Number} 
   */
  constructor(phenomenon, measurements, users, tracks, min, max, avg) {
    this.phenomenon = phenomenon;
    this.measurements = measurements;
    this.users = users;
    this.tracks = tracks;
    this.min = min;
    this.max = max;
    this.avg = avg;
  }

  /**
   * Constructs a <code>Statistic</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Statistic} obj Optional instance to populate.
   * @return {module:model/Statistic} The populated <code>Statistic</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Statistic();
      if (data.hasOwnProperty('phenomenon'))
        obj.phenomenon = Phenomenon.constructFromObject(data['phenomenon']);
      if (data.hasOwnProperty('measurements'))
        obj.measurements = ApiClient.convertToType(data['measurements'], 'Number');
      if (data.hasOwnProperty('users'))
        obj.users = ApiClient.convertToType(data['users'], 'Number');
      if (data.hasOwnProperty('tracks'))
        obj.tracks = ApiClient.convertToType(data['tracks'], 'Number');
      if (data.hasOwnProperty('sensors'))
        obj.sensors = ApiClient.convertToType(data['sensors'], 'Number');
      if (data.hasOwnProperty('min'))
        obj.min = ApiClient.convertToType(data['min'], 'Number');
      if (data.hasOwnProperty('max'))
        obj.max = ApiClient.convertToType(data['max'], 'Number');
      if (data.hasOwnProperty('avg'))
        obj.avg = ApiClient.convertToType(data['avg'], 'Number');
    }
    return obj;
  }
}

/**
 * @member {module:model/Phenomenon} phenomenon
 */
Statistic.prototype.phenomenon = undefined;

/**
 * @member {Number} measurements
 */
Statistic.prototype.measurements = undefined;

/**
 * @member {Number} users
 */
Statistic.prototype.users = undefined;

/**
 * @member {Number} tracks
 */
Statistic.prototype.tracks = undefined;

/**
 * @member {Number} sensors
 */
Statistic.prototype.sensors = undefined;

/**
 * @member {Number} min
 */
Statistic.prototype.min = undefined;

/**
 * @member {Number} max
 */
Statistic.prototype.max = undefined;

/**
 * @member {Number} avg
 */
Statistic.prototype.avg = undefined;

