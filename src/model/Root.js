/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Root model module.
 * @module model/Root
 * @version 1.0.0
 */
export class Root {
  /**
   * Constructs a new <code>Root</code>.
   * @alias module:model/Root
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Root</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Root} obj Optional instance to populate.
   * @return {module:model/Root} The populated <code>Root</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Root();
      if (data.hasOwnProperty('users'))
        obj.users = ApiClient.convertToType(data['users'], 'String');
      if (data.hasOwnProperty('tracks'))
        obj.tracks = ApiClient.convertToType(data['tracks'], 'String');
      if (data.hasOwnProperty('groups'))
        obj.groups = ApiClient.convertToType(data['groups'], 'String');
      if (data.hasOwnProperty('sensors'))
        obj.sensors = ApiClient.convertToType(data['sensors'], 'String');
      if (data.hasOwnProperty('phenomenons'))
        obj.phenomenons = ApiClient.convertToType(data['phenomenons'], 'String');
      if (data.hasOwnProperty('measurements'))
        obj.measurements = ApiClient.convertToType(data['measurements'], 'String');
      if (data.hasOwnProperty('schema'))
        obj.schema = ApiClient.convertToType(data['schema'], 'String');
      if (data.hasOwnProperty('termsOfUse'))
        obj.termsOfUse = ApiClient.convertToType(data['termsOfUse'], 'String');
      if (data.hasOwnProperty('privacyStatements'))
        obj.privacyStatements = ApiClient.convertToType(data['privacyStatements'], 'String');
      if (data.hasOwnProperty('schemas'))
        obj.schemas = ApiClient.convertToType(data['schemas'], 'String');
      if (data.hasOwnProperty('api-docs'))
        obj.apiDocs = ApiClient.convertToType(data['api-docs'], 'String');
      if (data.hasOwnProperty('badges'))
        obj.badges = ApiClient.convertToType(data['badges'], 'String');
      if (data.hasOwnProperty('announcements'))
        obj.announcements = ApiClient.convertToType(data['announcements'], 'String');
      if (data.hasOwnProperty('statistics'))
        obj.statistics = ApiClient.convertToType(data['statistics'], 'String');
      if (data.hasOwnProperty('counts'))
        obj.counts = ApiClient.convertToType(data['counts'], Object);
    }
    return obj;
  }
}

/**
 * @member {String} users
 */
Root.prototype.users = undefined;

/**
 * @member {String} tracks
 */
Root.prototype.tracks = undefined;

/**
 * @member {String} groups
 */
Root.prototype.groups = undefined;

/**
 * @member {String} sensors
 */
Root.prototype.sensors = undefined;

/**
 * @member {String} phenomenons
 */
Root.prototype.phenomenons = undefined;

/**
 * @member {String} measurements
 */
Root.prototype.measurements = undefined;

/**
 * @member {String} schema
 */
Root.prototype.schema = undefined;

/**
 * @member {String} termsOfUse
 */
Root.prototype.termsOfUse = undefined;

/**
 * @member {String} privacyStatements
 */
Root.prototype.privacyStatements = undefined;

/**
 * @member {String} schemas
 */
Root.prototype.schemas = undefined;

/**
 * @member {String} apiDocs
 */
Root.prototype.apiDocs = undefined;

/**
 * @member {String} badges
 */
Root.prototype.badges = undefined;

/**
 * @member {String} announcements
 */
Root.prototype.announcements = undefined;

/**
 * @member {String} statistics
 */
Root.prototype.statistics = undefined;

/**
 * @member {Object} counts
 */
Root.prototype.counts = undefined;

