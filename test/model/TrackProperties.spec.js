/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackProperties', function() {
      beforeEach(function() {
        instance = new EnviroCarRestApi.TrackProperties();
      });

      it('should create an instance of TrackProperties', function() {
        // TODO: update the code to test TrackProperties
        expect(instance).to.be.a(EnviroCarRestApi.TrackProperties);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property sensor (base name: "sensor")', function() {
        // TODO: update the code to test the property sensor
        expect(instance).to.have.property('sensor');
        // expect(instance.sensor).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property appVersion (base name: "appVersion")', function() {
        // TODO: update the code to test the property appVersion
        expect(instance).to.have.property('appVersion');
        // expect(instance.appVersion).to.be(expectedValueLiteral);
      });

      it('should have the property obdDevice (base name: "obdDevice")', function() {
        // TODO: update the code to test the property obdDevice
        expect(instance).to.have.property('obdDevice');
        // expect(instance.obdDevice).to.be(expectedValueLiteral);
      });

      it('should have the property touVersion (base name: "touVersion")', function() {
        // TODO: update the code to test the property touVersion
        expect(instance).to.have.property('touVersion');
        // expect(instance.touVersion).to.be(expectedValueLiteral);
      });

      it('should have the property length (base name: "length")', function() {
        // TODO: update the code to test the property length
        expect(instance).to.have.property('length');
        // expect(instance.length).to.be(expectedValueLiteral);
      });

      it('should have the property begin (base name: "begin")', function() {
        // TODO: update the code to test the property begin
        expect(instance).to.have.property('begin');
        // expect(instance.begin).to.be(expectedValueLiteral);
      });

      it('should have the property end (base name: "end")', function() {
        // TODO: update the code to test the property end
        expect(instance).to.have.property('end');
        // expect(instance.end).to.be(expectedValueLiteral);
      });

      it('should have the property measurementProfile (base name: "measurementProfile")', function() {
        // TODO: update the code to test the property measurementProfile
        expect(instance).to.have.property('measurementProfile');
        // expect(instance.measurementProfile).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
