/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Exception1', function() {
      beforeEach(function() {
        instance = new EnviroCarRestApi.Exception1();
      });

      it('should create an instance of Exception1', function() {
        // TODO: update the code to test Exception1
        expect(instance).to.be.a(EnviroCarRestApi.Exception1);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property message (base name: "message")', function() {
        // TODO: update the code to test the property message
        expect(instance).to.have.property('message');
        // expect(instance.message).to.be(expectedValueLiteral);
      });

      it('should have the property at (base name: "at")', function() {
        // TODO: update the code to test the property at
        expect(instance).to.have.property('at');
        // expect(instance.at).to.be(expectedValueLiteral);
      });

      it('should have the property suppressed (base name: "suppressed")', function() {
        // TODO: update the code to test the property suppressed
        expect(instance).to.have.property('suppressed');
        // expect(instance.suppressed).to.be(expectedValueLiteral);
      });

      it('should have the property causedBy (base name: "causedBy")', function() {
        // TODO: update the code to test the property causedBy
        expect(instance).to.have.property('causedBy');
        // expect(instance.causedBy).to.be(expectedValueLiteral);
      });

    });
  });

}));
