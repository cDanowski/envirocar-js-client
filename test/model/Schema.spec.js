/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Schema', function() {
      beforeEach(function() {
        instance = new EnviroCarRestApi.Schema();
      });

      it('should create an instance of Schema', function() {
        // TODO: update the code to test Schema
        expect(instance).to.be.a(EnviroCarRestApi.Schema);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property multipleOf (base name: "multipleOf")', function() {
        // TODO: update the code to test the property multipleOf
        expect(instance).to.have.property('multipleOf');
        // expect(instance.multipleOf).to.be(expectedValueLiteral);
      });

      it('should have the property maximum (base name: "maximum")', function() {
        // TODO: update the code to test the property maximum
        expect(instance).to.have.property('maximum');
        // expect(instance.maximum).to.be(expectedValueLiteral);
      });

      it('should have the property exclusiveMaximum (base name: "exclusiveMaximum")', function() {
        // TODO: update the code to test the property exclusiveMaximum
        expect(instance).to.have.property('exclusiveMaximum');
        // expect(instance.exclusiveMaximum).to.be(expectedValueLiteral);
      });

      it('should have the property minimum (base name: "minimum")', function() {
        // TODO: update the code to test the property minimum
        expect(instance).to.have.property('minimum');
        // expect(instance.minimum).to.be(expectedValueLiteral);
      });

      it('should have the property exclusiveMinimum (base name: "exclusiveMinimum")', function() {
        // TODO: update the code to test the property exclusiveMinimum
        expect(instance).to.have.property('exclusiveMinimum');
        // expect(instance.exclusiveMinimum).to.be(expectedValueLiteral);
      });

      it('should have the property maxLength (base name: "maxLength")', function() {
        // TODO: update the code to test the property maxLength
        expect(instance).to.have.property('maxLength');
        // expect(instance.maxLength).to.be(expectedValueLiteral);
      });

      it('should have the property minLength (base name: "minLength")', function() {
        // TODO: update the code to test the property minLength
        expect(instance).to.have.property('minLength');
        // expect(instance.minLength).to.be(expectedValueLiteral);
      });

      it('should have the property pattern (base name: "pattern")', function() {
        // TODO: update the code to test the property pattern
        expect(instance).to.have.property('pattern');
        // expect(instance.pattern).to.be(expectedValueLiteral);
      });

      it('should have the property maxItems (base name: "maxItems")', function() {
        // TODO: update the code to test the property maxItems
        expect(instance).to.have.property('maxItems');
        // expect(instance.maxItems).to.be(expectedValueLiteral);
      });

      it('should have the property minItems (base name: "minItems")', function() {
        // TODO: update the code to test the property minItems
        expect(instance).to.have.property('minItems');
        // expect(instance.minItems).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueItems (base name: "uniqueItems")', function() {
        // TODO: update the code to test the property uniqueItems
        expect(instance).to.have.property('uniqueItems');
        // expect(instance.uniqueItems).to.be(expectedValueLiteral);
      });

      it('should have the property maxProperties (base name: "maxProperties")', function() {
        // TODO: update the code to test the property maxProperties
        expect(instance).to.have.property('maxProperties');
        // expect(instance.maxProperties).to.be(expectedValueLiteral);
      });

      it('should have the property minProperties (base name: "minProperties")', function() {
        // TODO: update the code to test the property minProperties
        expect(instance).to.have.property('minProperties');
        // expect(instance.minProperties).to.be(expectedValueLiteral);
      });

      it('should have the property required (base name: "required")', function() {
        // TODO: update the code to test the property required
        expect(instance).to.have.property('required');
        // expect(instance.required).to.be(expectedValueLiteral);
      });

      it('should have the property _enum (base name: "enum")', function() {
        // TODO: update the code to test the property _enum
        expect(instance).to.have.property('_enum');
        // expect(instance._enum).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property not (base name: "not")', function() {
        // TODO: update the code to test the property not
        expect(instance).to.have.property('not');
        // expect(instance.not).to.be(expectedValueLiteral);
      });

      it('should have the property allOf (base name: "allOf")', function() {
        // TODO: update the code to test the property allOf
        expect(instance).to.have.property('allOf');
        // expect(instance.allOf).to.be(expectedValueLiteral);
      });

      it('should have the property oneOf (base name: "oneOf")', function() {
        // TODO: update the code to test the property oneOf
        expect(instance).to.have.property('oneOf');
        // expect(instance.oneOf).to.be(expectedValueLiteral);
      });

      it('should have the property anyOf (base name: "anyOf")', function() {
        // TODO: update the code to test the property anyOf
        expect(instance).to.have.property('anyOf');
        // expect(instance.anyOf).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

      it('should have the property properties (base name: "properties")', function() {
        // TODO: update the code to test the property properties
        expect(instance).to.have.property('properties');
        // expect(instance.properties).to.be(expectedValueLiteral);
      });

      it('should have the property additionalProperties (base name: "additionalProperties")', function() {
        // TODO: update the code to test the property additionalProperties
        expect(instance).to.have.property('additionalProperties');
        // expect(instance.additionalProperties).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property format (base name: "format")', function() {
        // TODO: update the code to test the property format
        expect(instance).to.have.property('format');
        // expect(instance.format).to.be(expectedValueLiteral);
      });

      it('should have the property _default (base name: "default")', function() {
        // TODO: update the code to test the property _default
        expect(instance).to.have.property('_default');
        // expect(instance._default).to.be(expectedValueLiteral);
      });

      it('should have the property nullable (base name: "nullable")', function() {
        // TODO: update the code to test the property nullable
        expect(instance).to.have.property('nullable');
        // expect(instance.nullable).to.be(expectedValueLiteral);
      });

      it('should have the property discriminator (base name: "discriminator")', function() {
        // TODO: update the code to test the property discriminator
        expect(instance).to.have.property('discriminator');
        // expect(instance.discriminator).to.be(expectedValueLiteral);
      });

      it('should have the property readOnly (base name: "readOnly")', function() {
        // TODO: update the code to test the property readOnly
        expect(instance).to.have.property('readOnly');
        // expect(instance.readOnly).to.be(expectedValueLiteral);
      });

      it('should have the property writeOnly (base name: "writeOnly")', function() {
        // TODO: update the code to test the property writeOnly
        expect(instance).to.have.property('writeOnly');
        // expect(instance.writeOnly).to.be(expectedValueLiteral);
      });

      it('should have the property example (base name: "example")', function() {
        // TODO: update the code to test the property example
        expect(instance).to.have.property('example');
        // expect(instance.example).to.be(expectedValueLiteral);
      });

      it('should have the property externalDocs (base name: "externalDocs")', function() {
        // TODO: update the code to test the property externalDocs
        expect(instance).to.have.property('externalDocs');
        // expect(instance.externalDocs).to.be(expectedValueLiteral);
      });

      it('should have the property deprecated (base name: "deprecated")', function() {
        // TODO: update the code to test the property deprecated
        expect(instance).to.have.property('deprecated');
        // expect(instance.deprecated).to.be(expectedValueLiteral);
      });

      it('should have the property xml (base name: "xml")', function() {
        // TODO: update the code to test the property xml
        expect(instance).to.have.property('xml');
        // expect(instance.xml).to.be(expectedValueLiteral);
      });

    });
  });

}));
