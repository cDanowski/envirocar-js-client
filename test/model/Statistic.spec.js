/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Statistic', function() {
      beforeEach(function() {
        instance = new EnviroCarRestApi.Statistic();
      });

      it('should create an instance of Statistic', function() {
        // TODO: update the code to test Statistic
        expect(instance).to.be.a(EnviroCarRestApi.Statistic);
      });

      it('should have the property phenomenon (base name: "phenomenon")', function() {
        // TODO: update the code to test the property phenomenon
        expect(instance).to.have.property('phenomenon');
        // expect(instance.phenomenon).to.be(expectedValueLiteral);
      });

      it('should have the property measurements (base name: "measurements")', function() {
        // TODO: update the code to test the property measurements
        expect(instance).to.have.property('measurements');
        // expect(instance.measurements).to.be(expectedValueLiteral);
      });

      it('should have the property users (base name: "users")', function() {
        // TODO: update the code to test the property users
        expect(instance).to.have.property('users');
        // expect(instance.users).to.be(expectedValueLiteral);
      });

      it('should have the property tracks (base name: "tracks")', function() {
        // TODO: update the code to test the property tracks
        expect(instance).to.have.property('tracks');
        // expect(instance.tracks).to.be(expectedValueLiteral);
      });

      it('should have the property sensors (base name: "sensors")', function() {
        // TODO: update the code to test the property sensors
        expect(instance).to.have.property('sensors');
        // expect(instance.sensors).to.be(expectedValueLiteral);
      });

      it('should have the property min (base name: "min")', function() {
        // TODO: update the code to test the property min
        expect(instance).to.have.property('min');
        // expect(instance.min).to.be(expectedValueLiteral);
      });

      it('should have the property max (base name: "max")', function() {
        // TODO: update the code to test the property max
        expect(instance).to.have.property('max');
        // expect(instance.max).to.be(expectedValueLiteral);
      });

      it('should have the property avg (base name: "avg")', function() {
        // TODO: update the code to test the property avg
        expect(instance).to.have.property('avg');
        // expect(instance.avg).to.be(expectedValueLiteral);
      });

    });
  });

}));
