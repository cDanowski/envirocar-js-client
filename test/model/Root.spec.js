/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Root', function() {
      beforeEach(function() {
        instance = new EnviroCarRestApi.Root();
      });

      it('should create an instance of Root', function() {
        // TODO: update the code to test Root
        expect(instance).to.be.a(EnviroCarRestApi.Root);
      });

      it('should have the property users (base name: "users")', function() {
        // TODO: update the code to test the property users
        expect(instance).to.have.property('users');
        // expect(instance.users).to.be(expectedValueLiteral);
      });

      it('should have the property tracks (base name: "tracks")', function() {
        // TODO: update the code to test the property tracks
        expect(instance).to.have.property('tracks');
        // expect(instance.tracks).to.be(expectedValueLiteral);
      });

      it('should have the property groups (base name: "groups")', function() {
        // TODO: update the code to test the property groups
        expect(instance).to.have.property('groups');
        // expect(instance.groups).to.be(expectedValueLiteral);
      });

      it('should have the property sensors (base name: "sensors")', function() {
        // TODO: update the code to test the property sensors
        expect(instance).to.have.property('sensors');
        // expect(instance.sensors).to.be(expectedValueLiteral);
      });

      it('should have the property phenomenons (base name: "phenomenons")', function() {
        // TODO: update the code to test the property phenomenons
        expect(instance).to.have.property('phenomenons');
        // expect(instance.phenomenons).to.be(expectedValueLiteral);
      });

      it('should have the property measurements (base name: "measurements")', function() {
        // TODO: update the code to test the property measurements
        expect(instance).to.have.property('measurements');
        // expect(instance.measurements).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

      it('should have the property termsOfUse (base name: "termsOfUse")', function() {
        // TODO: update the code to test the property termsOfUse
        expect(instance).to.have.property('termsOfUse');
        // expect(instance.termsOfUse).to.be(expectedValueLiteral);
      });

      it('should have the property privacyStatements (base name: "privacyStatements")', function() {
        // TODO: update the code to test the property privacyStatements
        expect(instance).to.have.property('privacyStatements');
        // expect(instance.privacyStatements).to.be(expectedValueLiteral);
      });

      it('should have the property schemas (base name: "schemas")', function() {
        // TODO: update the code to test the property schemas
        expect(instance).to.have.property('schemas');
        // expect(instance.schemas).to.be(expectedValueLiteral);
      });

      it('should have the property apiDocs (base name: "api-docs")', function() {
        // TODO: update the code to test the property apiDocs
        expect(instance).to.have.property('apiDocs');
        // expect(instance.apiDocs).to.be(expectedValueLiteral);
      });

      it('should have the property badges (base name: "badges")', function() {
        // TODO: update the code to test the property badges
        expect(instance).to.have.property('badges');
        // expect(instance.badges).to.be(expectedValueLiteral);
      });

      it('should have the property announcements (base name: "announcements")', function() {
        // TODO: update the code to test the property announcements
        expect(instance).to.have.property('announcements');
        // expect(instance.announcements).to.be(expectedValueLiteral);
      });

      it('should have the property statistics (base name: "statistics")', function() {
        // TODO: update the code to test the property statistics
        expect(instance).to.have.property('statistics');
        // expect(instance.statistics).to.be(expectedValueLiteral);
      });

      it('should have the property counts (base name: "counts")', function() {
        // TODO: update the code to test the property counts
        expect(instance).to.have.property('counts');
        // expect(instance.counts).to.be(expectedValueLiteral);
      });

    });
  });

}));
