/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EnviroCarRestApi.UsersApi();
  });

  describe('(package)', function() {
    describe('UsersApi', function() {
      describe('addFriend', function() {
        it('should call addFriend successfully', function(done) {
          // TODO: uncomment, update parameter values for addFriend call
          /*

          instance.addFriend(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createFueling', function() {
        it('should call createFueling successfully', function(done) {
          // TODO: uncomment, update parameter values for createFueling call
          /*

          instance.createFueling(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSensorForUser', function() {
        it('should call createSensorForUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createSensorForUser call
          /*

          instance.createSensorForUser(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTrackForUser', function() {
        it('should call createTrackForUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createTrackForUser call
          /*

          instance.createTrackForUser(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUser', function() {
        it('should call createUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createUser call
          /*

          instance.createUser(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUserGroup', function() {
        it('should call createUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createUserGroup call
          /*

          instance.createUserGroup(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('declineRequest', function() {
        it('should call declineRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for declineRequest call
          /*

          instance.declineRequest(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFriend', function() {
        it('should call deleteFriend successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFriend call
          /*

          instance.deleteFriend(userId, friendId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFueling', function() {
        it('should call deleteFueling successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFueling call
          /*

          instance.deleteFueling(userId, fuelingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUser', function() {
        it('should call deleteUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUser call
          /*
          var opts = {};

          instance.deleteUser(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUserGroup', function() {
        it('should call deleteUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUserGroup call
          /*

          instance.deleteUserGroup(userId, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAvatar', function() {
        it('should call getAvatar successfully', function(done) {
          // TODO: uncomment, update parameter values for getAvatar call and complete the assertions
          /*

          instance.getAvatar(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFriend', function() {
        it('should call getFriend successfully', function(done) {
          // TODO: uncomment, update parameter values for getFriend call and complete the assertions
          /*

          instance.getFriend(userId, friendId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFriendActivities', function() {
        it('should call getFriendActivities successfully', function(done) {
          // TODO: uncomment, update parameter values for getFriendActivities call and complete the assertions
          /*
          var opts = {};

          instance.getFriendActivities(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Activities);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFriendActivityById', function() {
        it('should call getFriendActivityById successfully', function(done) {
          // TODO: uncomment, update parameter values for getFriendActivityById call and complete the assertions
          /*

          instance.getFriendActivityById(userId, activityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Activity);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFriends', function() {
        it('should call getFriends successfully', function(done) {
          // TODO: uncomment, update parameter values for getFriends call and complete the assertions
          /*

          instance.getFriends(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Users);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFueling', function() {
        it('should call getFueling successfully', function(done) {
          // TODO: uncomment, update parameter values for getFueling call and complete the assertions
          /*

          instance.getFueling(userId, fuelingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Fueling);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFuelings', function() {
        it('should call getFuelings successfully', function(done) {
          // TODO: uncomment, update parameter values for getFuelings call and complete the assertions
          /*
          var opts = {};

          instance.getFuelings(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Fuelings);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIncomingFriendRequests', function() {
        it('should call getIncomingFriendRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for getIncomingFriendRequests call and complete the assertions
          /*

          instance.getIncomingFriendRequests(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Users);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOutgoingFriendRequests', function() {
        it('should call getOutgoingFriendRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for getOutgoingFriendRequests call and complete the assertions
          /*

          instance.getOutgoingFriendRequests(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Users);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSensorsOfUser', function() {
        it('should call getSensorsOfUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getSensorsOfUser call and complete the assertions
          /*
          var opts = {};

          instance.getSensorsOfUser(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Sensors);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStatisticsOfUser', function() {
        it('should call getStatisticsOfUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getStatisticsOfUser call and complete the assertions
          /*

          instance.getStatisticsOfUser(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Statistics);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTracksOfUser', function() {
        it('should call getTracksOfUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getTracksOfUser call and complete the assertions
          /*
          var opts = {};

          instance.getTracksOfUser(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Tracks);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserActivities', function() {
        it('should call getUserActivities successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserActivities call and complete the assertions
          /*
          var opts = {};

          instance.getUserActivities(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Activities);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserActivityById', function() {
        it('should call getUserActivityById successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserActivityById call and complete the assertions
          /*

          instance.getUserActivityById(userId, activityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Activity);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserById', function() {
        it('should call getUserById successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserById call and complete the assertions
          /*

          instance.getUserById(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserGroup', function() {
        it('should call getUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserGroup call and complete the assertions
          /*

          instance.getUserGroup(userId, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Group);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserGroups', function() {
        it('should call getUserGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserGroups call and complete the assertions
          /*
          var opts = {};

          instance.getUserGroups(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Groups);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserStatistics', function() {
        it('should call getUserStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserStatistics call and complete the assertions
          /*

          instance.getUserStatistics(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.UserStatistic);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUsers', function() {
        it('should call getUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for getUsers call and complete the assertions
          /*
          var opts = {};

          instance.getUsers(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Users);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyUser', function() {
        it('should call modifyUser successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyUser call
          /*

          instance.modifyUser(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyUserGroup', function() {
        it('should call modifyUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyUserGroup call
          /*

          instance.modifyUserGroup(body, userId, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
