/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EnviroCarRestApi.TracksApi();
  });

  describe('(package)', function() {
    describe('TracksApi', function() {
      describe('addTrackMeasurement', function() {
        it('should call addTrackMeasurement successfully', function(done) {
          // TODO: uncomment, update parameter values for addTrackMeasurement call
          /*

          instance.addTrackMeasurement(body, trackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTrack', function() {
        it('should call createTrack successfully', function(done) {
          // TODO: uncomment, update parameter values for createTrack call
          /*

          instance.createTrack(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTrackForUser', function() {
        it('should call createTrackForUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createTrackForUser call
          /*

          instance.createTrackForUser(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTrack', function() {
        it('should call deleteTrack successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTrack call
          /*

          instance.deleteTrack(trackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackById', function() {
        it('should call getTrackById successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackById call and complete the assertions
          /*

          instance.getTrackById(trackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Track);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackMeasurements', function() {
        it('should call getTrackMeasurements successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackMeasurements call and complete the assertions
          /*
          var opts = {};

          instance.getTrackMeasurements(trackId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Measurements);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackSensor', function() {
        it('should call getTrackSensor successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackSensor call and complete the assertions
          /*

          instance.getTrackSensor(trackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Sensor);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackStatistics', function() {
        it('should call getTrackStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackStatistics call and complete the assertions
          /*

          instance.getTrackStatistics(trackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Statistics);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTracks', function() {
        it('should call getTracks successfully', function(done) {
          // TODO: uncomment, update parameter values for getTracks call and complete the assertions
          /*
          var opts = {};

          instance.getTracks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Tracks);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTracksOfUser', function() {
        it('should call getTracksOfUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getTracksOfUser call and complete the assertions
          /*
          var opts = {};

          instance.getTracksOfUser(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Tracks);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyTrack', function() {
        it('should call modifyTrack successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyTrack call
          /*

          instance.modifyTrack(body, trackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('previewTrack', function() {
        it('should call previewTrack successfully', function(done) {
          // TODO: uncomment, update parameter values for previewTrack call and complete the assertions
          /*

          instance.previewTrack(trackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('shareTrack', function() {
        it('should call shareTrack successfully', function(done) {
          // TODO: uncomment, update parameter values for shareTrack call and complete the assertions
          /*
          var opts = {};

          instance.shareTrack(trackId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
