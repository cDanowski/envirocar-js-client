/*
 * enviroCar REST API
 * enviroCar REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@envirocar.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnviroCarRestApi);
  }
}(this, function(expect, EnviroCarRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EnviroCarRestApi.GroupsApi();
  });

  describe('(package)', function() {
    describe('GroupsApi', function() {
      describe('addGroupMember', function() {
        it('should call addGroupMember successfully', function(done) {
          // TODO: uncomment, update parameter values for addGroupMember call
          /*

          instance.addGroupMember(body, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createGroup', function() {
        it('should call createGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createGroup call
          /*

          instance.createGroup(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUserGroup', function() {
        it('should call createUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createUserGroup call
          /*

          instance.createUserGroup(body, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteGroup', function() {
        it('should call deleteGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteGroup call
          /*

          instance.deleteGroup(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUserGroup', function() {
        it('should call deleteUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUserGroup call
          /*

          instance.deleteUserGroup(userId, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGroup', function() {
        it('should call getGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getGroup call and complete the assertions
          /*

          instance.getGroup(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Group);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGroupActivities', function() {
        it('should call getGroupActivities successfully', function(done) {
          // TODO: uncomment, update parameter values for getGroupActivities call and complete the assertions
          /*
          var opts = {};

          instance.getGroupActivities(groupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Activities);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGroupActivityById', function() {
        it('should call getGroupActivityById successfully', function(done) {
          // TODO: uncomment, update parameter values for getGroupActivityById call and complete the assertions
          /*

          instance.getGroupActivityById(groupId, activityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Activity);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGroupMember', function() {
        it('should call getGroupMember successfully', function(done) {
          // TODO: uncomment, update parameter values for getGroupMember call and complete the assertions
          /*

          instance.getGroupMember(groupId, memberId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGroupMembers', function() {
        it('should call getGroupMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for getGroupMembers call and complete the assertions
          /*
          var opts = {};

          instance.getGroupMembers(groupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Users);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGroups', function() {
        it('should call getGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getGroups call and complete the assertions
          /*
          var opts = {};

          instance.getGroups(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Groups);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserGroup', function() {
        it('should call getUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserGroup call and complete the assertions
          /*

          instance.getUserGroup(userId, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Group);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserGroups', function() {
        it('should call getUserGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserGroups call and complete the assertions
          /*
          var opts = {};

          instance.getUserGroups(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EnviroCarRestApi.Groups);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyGroup', function() {
        it('should call modifyGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyGroup call
          /*

          instance.modifyGroup(body, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyUserGroup', function() {
        it('should call modifyUserGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyUserGroup call
          /*

          instance.modifyUserGroup(body, userId, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeGroupMember', function() {
        it('should call removeGroupMember successfully', function(done) {
          // TODO: uncomment, update parameter values for removeGroupMember call
          /*

          instance.removeGroupMember(groupId, memberId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
